---
- hosts: all
  become: yes
  
  vars: 
    testlink_tarball_url: 'https://downloads.sourceforge.net/project/testlink/TestLink%201.9/TestLink%201.9.19/testlink-1.9.19.tar.gz'
    testlink_tarball_md5: 'https://downloads.sourceforge.net/project/testlink/TestLink%201.9/TestLink%201.9.19/testlink-1.9.19.tar.gz.md5'
    testlink_tarball_version: '1.9.19'
    testlink_var_path: '/var/testlink'
    testlink_db_name: 'testlinkDB'
    testlink_db_user: 'userTL'
    testlink_db_password: 'N3twork!'
    nginx_testlink_path: '/var/www/testlink'
    nginx_user: 'admin'
    item: '/testlink'
    ansible_python_interpreter: /usr/bin/python3
    mysql_root_password: 'N3twork!'

  tasks:


### LAMP SERVER INSTALLATION ###

  - name: install Mysql server
    apt:
      name: mysql-server,libmysqld-dev
      state: latest

  - name: Add Nginx to source.list
    lineinfile:
      path: /etc/apt/sources.list
      line: 'deb http://nginx.org/packages/mainline/debian/ stretch nginx'
    
  - name: Import Nginx repository’s package signing key and add it to apt
    apt_key:
      url: http://nginx.org/keys/nginx_signing.key
      state: present
    
  - name: apt upgrade & update
    shell: apt-get upgrade -y; apt-get update

  - name: Install NGINX
    apt: 
      name: nginx 
      state: latest

  - name: start nginx
    service:
      name: nginx
      state: started
    
  - name: Enable service nginx
    ansible.builtin.systemd:
      name: nginx
      enabled: yes
    
  - name: Enable ufw
    ufw: state=enabled
    
  - name: changing default incoming policy to 'deny'
    shell: sudo ufw default deny
    
  - name: autoriser les connexions à Nginx
    ufw: 
      rule: allow
      name: 'Nginx HTTP'  

  - name: PHP install
    apt:
      name: php7.0-fpm

  - name: sed lines
    command: "{{ item }}"
    with_items:
        - sudo sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g' /etc/php/7.0/fpm/php.ini
        - sudo sed -i 's/listen.owner = www-data/listen.owner = nginx/g' /etc/php/7.0/fpm/pool.d/www.conf
        - sudo sed -i 's/listen.group = www-data/listen.group = nginx/g' /etc/php/7.0/fpm/pool.d/www.conf
    
  - name: Create directory if it does not exist
    ansible.builtin.file:
      path: /var/www/testlink/
      state: directory
      mode: '0755'

  - name: Move file
    command: sudo mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.disabled
    
  - name: Copy our testlink conf file to server
    copy:
      src: templates/testlink.conf
      dest: /etc/nginx/conf.d
      owner: root
      group: root
      mode: 0644
  
  - name: download testlink tarball
    get_url:
      url: "{{ testlink_tarball_url }}"
      dest: /tmp/testlink.tar.gz

  - name: install pip3
    command: apt install python3-pip -y
  
  - name: Make sure pymysql is present
    command: pip3 install pymysql

  - name: create admin group
    group:
      name: "{{ nginx_user }}"
      state: present

  - name: Create user admin
    user:
      name: "{{ nginx_user }}"
      comment: user admin for nginx
      group: "{{ nginx_user }}"
  
  - name: install pexpect (module needed by expect ansible)
    apt:
      name: python-pexpect
      state: present
  
  - name: change admin User password
    expect:
      command: passwd admin
      responses:
        Question:
        (?i)New password: "N3twork!"
        (?i)Retype new password: "N3twork!"

  - name: unarchive testlink tarball
    unarchive:
      src: /tmp/testlink.tar.gz
      dest: /tmp
      copy: no
      owner: "{{ nginx_user }}"
      group: "{{ nginx_user }}"

  # Create TestLink workspace
  - name: check testlink temp path
    stat:
      path: "/tmp/testlink-{{ testlink_tarball_version }}"
    register: unarchive_testlink_stat

  - name: remove old files of ngninx directory
    file:
      path: /nginx
      state: absent

  # In case of destination directory already exists, mv will create a sub directory inside the destination directory
  - name: move testlink directory into nginx
    become: true
    command: mv /tmp/testlink-{{ testlink_tarball_version }} {{ nginx_testlink_path }}
    when: unarchive_testlink_stat.stat.exists
    ignore_errors: yes

  # Read/write permissions
  - name: create testlink directory
    become: true
    file:
      path: "{{ item }}"
      state: directory
      owner: "{{ nginx_user }}"
      group: "{{ nginx_user }}"
      mode: 0775
    with_items:
      - '{{ testlink_var_path }}'
      - '{{ testlink_var_path }}/logs/'
      - '{{ testlink_var_path }}/upload_area/'

  # Database

  - name: Ensure mysql is running and starts on boot
    service:
      name: mysql
      state: started
      enabled: yes

  - name: create testlink database
    mysql_db:
      name: "{{ testlink_db_name }}"
      state: present
      encoding: utf8
      collation: utf8_general_ci
      login_unix_socket: /var/run/mysqld/mysqld.sock

  - name: Copy our database to server
    copy:
      src: templates/testlink-1.9.19-db-withCamillesTestProject.sql
      dest: /tmp/
      owner: root
      group: root
      mode: 0644

  - name: create testlink table and data
    mysql_db:
      name: "{{ testlink_db_name }}"
      state: import
      target: /tmp/testlink-1.9.19-db-withCamillesTestProject.sql
      login_unix_socket: /var/run/mysqld/mysqld.sock

  - name: create user for testlink database
    mysql_user:
      name: "{{ testlink_db_user }}"
      host: localhost
      state: present
      password: "{{ testlink_db_password }}"
      priv: "{{ testlink_db_name }}.*:ALL"
      login_unix_socket: /var/run/mysqld/mysqld.sock

  - name: import secure installation of mysql
    copy:
      src: templates/install&secure_mysql.sh
      dest: /tmp/
      owner: root
      group: root
      mode: 0644
  
  - name: execute .sh file
    command: sh /tmp/install&secure_mysql.sh
  